CREATE TABLE AIRCRAFT(
TAIL_NO VARCHAR2(8) CONSTRAINT TAIL_NO_PK PRIMARY KEY,
MODEL_NAME VARCHAR2(20),
FLYING_HOUR NUMBER(5,3),
ENGINE_HOUR NUMBER(5,3),
LIFE_HOUR NUMBER(5,3),
TOTAL_LANDING NUMBER(3,0),
NEXT_INSP DATE,
SVC NUMBER(1));

INSERT INTO AIRCRAFT VALUES ('0001','Mg-29',0,10,10,2,to_date('',to_date('11-11-2022','dd-mm-yyyy'),1);

CREATE TABLE PILOT(
PILOT_BD VARCHAR2(8) CONSTRAINT PILOT_BD_PK PRIMARY KEY,
PILOT_NAME VARCHAR2(20),
PILOT_FLYING_HOUR NUMBER(5,3),
PILOT_ADDS VARCHAR2(100),
PILOT_PHONE VARCHAR2(12),
CAT VARCHAR2(20),
PILOT_PASSWORD VARCHAR2(20),
PILOT_EMAIL VARCHAR2(50),
PILOT_RANK VARCHAR2(20));

INSERT INTO PILOT VALUES ('0001','RAHIM UDDIN',10,'JANI NA','01753861142','FIGHTER','0001','tajakka2002@gmail.com','Flying OFFICER');

CREATE TABLE VEHICLE(
VEHICLE_NO VARCHAR2(8) CONSTRAINT VEHICLE_NO_PK PRIMARY KEY,
VEHICLE_NAME VARCHAR2(20));


CREATE TABLE SORTIE(
SERIAL Number(5),
SORTIE_DATE DATE NOT NULL,
SORTIE_TIME NUMBER(4) NOT NULL,
AC VARCHAR2(8) ,
FLOWN_BY VARCHAR2(8),
DAILY_FLYING_HOUR NUMBER(5,3),
DAILY_ENGINE_HOUR NUMBER(5,3),
DAILY_LANDING NUMBER(3,0),
VEHICLE_USED VARCHAR2(8),
DISCRIPANCIES VARCHAR2(20),
CONSTRAINT SERIAL_PK PRIMARY KEY(SERIAL),
CONSTRAINT TAIL_NO_FK FOREIGN KEY(AC) REFERENCES AIRCRAFT(TAIL_NO) ON DELETE CASCADE,
CONSTRAINT FLOWN_BY_FK FOREIGN KEY(FLOWN_BY) REFERENCES PILOT(PILOT_BD) ON DELETE CASCADE,
CONSTRAINT VEHICLE_USED_FK FOREIGN KEY(VEHICLE_USED) REFERENCES VEHICLE(VEHICLE_NO) ON DELETE CASCADE);


CREATE TABLE INSPECTION(
INSPECTION_ID VARCHAR2(20) CONSTRAINT INSPECTION_ID_PK PRIMARY KEY,
INSPECTION_NAME VARCHAR2(20),
INSPECTION_DATE DATE,
AC_TAIL_NO VARCHAR2(8),
SVC_AIRFRAME VARCHAR2(3),
SVC_ENGINE VARCHAR2(3),
SVC_LANDING_GEAR VARCHAR2(3),
SVC_EXHAUST VARCHAR2(3),
SVC_AFTERBURNER VARCHAR2(3),
CHECKED_BY VARCHAR2(20),
CONSTRAINT I_TAIL_NO_FK FOREIGN KEY(AC_TAIL_NO) REFERENCES AIRCRAFT(TAIL_NO) ON DELETE CASCADE,
CONSTRAINT CHECKED_BY_FK FOREIGN KEY(CHECKED_BY) REFERENCES STAFF(STAFF_BD) ON DELETE CASCADE);


CREATE TABLE STAFF(
STAFF_BD VARCHAR2(8) CONSTRAINT STAFF_BD_PK PRIMARY KEY,
STAFF_NAME VARCHAR2(20),
STAFF_BRANCH VARCHAR2(15),
STAFF_ADDS VARCHAR2(100),
STAFF_PHONE VARCHAR2(12),
STAFF_PASSWORD VARCHAR2(20),
STAFF_EMAIL VARCHAR2(50),
STAFF_RANK VARCHAR2(20));
INSERT INTO STAFF VALUES ('0003','TARHYUNG','DHAKA','MIRPUR','01753861142','0003','TAETAE@GMAIL.COM','JANI NA');

CREATE TABLE ADMIN (
ADMIN_BD VARCHAR2(8) CONSTRAINT ADMIN_BD_PK PRIMARY KEY,
ADMIN_PASSWORD VARCHAR2(20)
);
INSERT INTO ADMIN VALUES ('0003','0003');
INSERT INTO ADMIN VALUES ('0001','0001');


insert into staff values(\'1\',\'sunam\',\'Engg\',\'mirpur\',\'01798113559\',\'1234\')

--------------------------------------------------------------------------------------

PL SQL CODES :

CREATE OR REPLACE FUNCTION 
NEXT_INSP_COUNT (FLYING_HR IN NUMBER)
RETURN NUMBER 
AS
THIRTY NUMBER(4) :=30;
FIFTY NUMBER(4) :=50;
HUNDR NUMBER(4) :=100;
LOOP_COUNTER NUMBER(3) :=1;
MUL NUMBER (4) :=1;
MINIF NUMBER (4);
MINIS NUMBER (4);
MINIT NUMBER (4);
BEGIN 
WHILE MUL<=300
LOOP 
MUL := LOOP_COUNTER * THIRTY ;
LOOP_COUNTER := LOOP_COUNTER+1;
EXIT WHEN MUL >= FLYING_HR;
END LOOP;
MINIF :=MUL ;
RETURN MINIF ;
END;

DECLARE 
MULT NUMBER(4) ;
BEGIN
MULT :=NEXT_INSP_COUNT (0);
DBMS_OUTPUT.PUT_LINE(MULT);
END;

CREATE OR REPLACE FUNCTION 
NEXT_INSP_COUNT (FLYING_HR IN NUMBER)
RETURN NUMBER 
AS
THIRTY NUMBER(4) :=30;
FIFTY NUMBER(4) :=50;
HUNDR NUMBER(4) :=100;
LOOP_COUNTER NUMBER(3) :=1;
MUL NUMBER (4) :=1;
MINIF NUMBER (4);
MINIS NUMBER (4);
MINIT NUMBER (4);
MINI NUMBER(4);
BEGIN 
WHILE MUL<=300
LOOP 
MUL := LOOP_COUNTER * THIRTY ;
LOOP_COUNTER := LOOP_COUNTER+1;
EXIT WHEN MUL >= FLYING_HR;
END LOOP;
MINIF :=MUL ;
MUL :=1;
LOOP_COUNTER :=1;
WHILE MUL<=300
LOOP 
MUL := LOOP_COUNTER * FIFTY ;
LOOP_COUNTER := LOOP_COUNTER+1;
EXIT WHEN MUL >= FLYING_HR;
END LOOP;
MINIS :=MUL;
IF MINIF>MINIS THEN
    MINI :=MINIS;
ELSE
    MINI :=MINIF;
END IF;
MUL :=1;
LOOP_COUNTER :=1;
WHILE MUL<=300
LOOP 
MUL := LOOP_COUNTER * HUNDR ;
LOOP_COUNTER := LOOP_COUNTER+1;
EXIT WHEN MUL >= FLYING_HR;
END LOOP;
MINIT :=MUL;
IF MINIT>MINI THEN
    MINI :=MINI;
ELSE
    MINI :=MINIT;
END IF;
RETURN MINI ;
END;



